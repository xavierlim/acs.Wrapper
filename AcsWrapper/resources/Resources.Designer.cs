//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CO.Systems.Services.Acs.AcsWrapper.resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CO.Systems.Services.Acs.AcsWrapper.resources.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///int AXIS
        ///int NEED_FIND_INDEX
        ///
        ///FDEF(AXIS).#LL=0       ! Disable the axis left limit default response
        ///FDEF(AXIS).#RL=0       ! Disable the axis left limit default response
        ///FDEF(AXIS).#SLL=0
        ///FDEF(AXIS).#SRL=0
        ///
        ///
        ///
        ///
        ///HALT(AXIS)
        ///MFLAGS(AXIS).#DEFCON = 1 !just in case
        ///MFLAGS(AXIS).#HOME = 0
        ///
        ///_Y_COMMUT_HOOK_
        ///
        ///!the motion is
        ///!	1) in fast
        ///!	2) out fast
        ///!	3) in slow
        ///!	4) out slow
        ///
        ///! 1) in fast
        ///JOG/v(AXIS), -HOME_VEL_IN(AXIS) !Move to the left limit switch
        ///TILL STOP_CONDITION   ! Wait for the [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AxisHomingBuffer {
            get {
                return ResourceManager.GetString("AxisHomingBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !BypassModeBuffer
        ///
        ///int BypassModeError
        ///BypassModeError = 0
        ///
        ///int BypassSensorBlockedError,BypassAcqError,BypassExitError,BypassReleaseError,BypassSmemaError
        ///
        ///BypassSensorBlockedError = 1
        ///BypassAcqError = 2
        ///BypassExitError = 3
        ///BypassReleaseError = 4
        ///BypassSmemaError = 5
        ///
        ///int WaitTimeToSearch
        ///int WaitTimeToAcq
        ///int WaitTimeToCutout
        ///int WaitTimeToExit
        ///int WaitTimeToRelease
        ///int WaitTimeToSmema
        ///
        ///if 	(EntryOpto_Bit = 1 &amp; ExitOpto_Bit = 1 &amp; BoardStopPanelAlignSensor_Bit = 1)								!IF ALL SENSOR [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BypassModeBuffer {
            get {
                return ResourceManager.GetString("BypassModeBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !ChangeWidthBuffer
        ///
        ///global int ChangeWidthStateError
        ///ChangeWidthStateError = 0
        ///
        ///global  int ChangeWidthToError,ChangeWidthToHomedError,ChangeWidthToNotAtSpecifiedError
        ///
        ///
        ///
        ///ChangeWidthToError=1
        ///ChangeWidthToHomedError=2
        ///ChangeWidthToNotAtSpecifiedError=3
        ///
        ///int ConveyorSpecifiedWidth
        ///int WaitTimeToSearch
        ///
        ///
        ///CALL PanelSearch
        ///if CURRENT_STATUS = RELEASED_STATUS
        ///	if ConveyorWidthHomed = 1
        ///		CURRENT_STATUS = CHANGING_WIDTH_STATUS
        ///		CALL MoveConveyorToSpecifiedWidth
        ///		if (^AST(CONVEYOR_WIDTH_AXI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ChangeWidthBuffer {
            get {
                return ResourceManager.GetString("ChangeWidthBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !Reset CONVEYOR
        ///
        ///int Axis
        ///int Slave_Number
        ///
        ///MFLAGS(Axis).#HOME = 0
        ///
        ///Axis= 5
        ///Slave_Number = 2
        ///
        ///int EC_Offset
        ///
        ///EC_Offset = 350
        ///
        ///disable Axis
        ///till ^MST(Axis).#ENABLED
        ///wait 200
        ///
        ///!*********Unmapping ethercat offset******
        ///ecunmapin(EC_Offset)
        ///ecunmapout(EC_Offset)
        ///!***************************************
        ///
        ///!***********Fault Clear***********
        ///ecout(EC_Offset,ControlWord_Conveyor)
        ///ControlWord_Conveyor = 0x8F
        ///wait 500
        ///ControlWord_Conveyor = 0x0F
        ///coewrite/1(Slave_Number,0x6060,0,8)
        ///ecunmapi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ConveyorHomingBuffer {
            get {
                return ResourceManager.GetString("ConveyorHomingBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to global int I(100),I0,I1,I2,I3,I4,I5,I6,I7,I8,I9,I90,I91,I92,I93,I94,I95,I96,I97,I98,I99
        ///global real V(100),V0,V1,V2,V3,V4,V5,V6,V7,V8,V9,V90,V91,V92,V93,V94,V95,V96,V97,V98,V99
        ///
        ///!homing variables
        ///global real HOME_VEL_IN(10)
        ///global real HOME_VEL_OUT(10)
        ///global real HOME_OFFSET(10)
        ///
        ///global int X_AXIS
        ///global int Y_AXIS
        ///global int Z_AXIS
        ///
        ///global int CONVEYOR_AXIS
        ///global int CONVEYOR_WIDTH_AXIS
        ///global int LIFTER_AXIS
        ///
        ///global int ECOFFSETM(3)
        ///
        ///global int SAFE_STATUS = 0,LOADED_STATUS = 1,ERROR_S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string d_buffer {
            get {
                return ResourceManager.GetString("d_buffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !EmergencyStopBuffer
        ///
        ///!AUTOEXEC:
        ///
        ///CALL EnableOptos
        ///CALL Unclamp
        ///CALL LowerStopper
        ///CALL ClearBoardAvailable
        ///CALL ClearMachineReady
        ///CURRENT_STATUS = SAFE_STATUS
        ///
        ///STOP
        ///
        ///EnableOptos:
        ///	StopSensor_Bit = 1
        ///RET
        ///
        ///Unclamp:
        ///	ClampPanel_Bit = 0
        ///RET
        ///
        ///LowerStopper:
        ///	LockStopper_Bit = 0
        ///	RaiseBoardStopStopper_Bit = 0
        ///RET
        ///
        ///ClearBoardAvailable:
        ///	DownStreamBoardAvailable_Bit = 0
        ///RET
        ///
        ///ClearMachineReady:
        ///	SmemaUpStreamMachineReady_Bit = 0
        ///RET
        ///
        ///.
        /// </summary>
        internal static string EmergencyStopBuffer {
            get {
                return ResourceManager.GetString("EmergencyStopBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !FreePanelBuffer
        ///
        ///global int FreePanelStateError
        ///FreePanelStateError = 0
        ///
        ///global int FreePanelStopUpError,FreePanelOptoBlockedError,FreePanelToUnliftError,FreePanelToUnclampError
        ///
        ///FreePanelStopUpError=1
        ///FreePanelOptoBlockedError=2
        ///FreePanelToUnliftError=3
        ///FreePanelToUnclampError=4
        ///
        ///int UnclampLiftDelayTime
        ///int WaitTimeToUnlift
        ///int WaitTimeToUnclamp
        ///
        ///PanelFreed = -1
        ///
        ///if StopperArmDown_Bit = 1
        ///	CALL TurnOnPanelSensingOptos
        ///	if (EntryOpto_Bit = 0 &amp; ExitOpto_Bit = 0)
        ///		CALL UnclampPanel
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string FreePanelBuffer {
            get {
                return ResourceManager.GetString("FreePanelBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !Gantry X Homing
        ///
        ///int Axis_X1, Axis_X2
        ///
        ///Axis_X1 = 0
        ///Axis_X2 = 2
        ///
        ///MFLAGS(Axis_X1).#HOME = 0
        ///
        ///disable Axis_X1
        ///disable Axis_X2
        ///
        ///global real CnvT(5), CnvA(5)
        ///disable Axis_X1, Axis_X2
        ///
        ///CALL INPUTSHAPING_OFF
        ///CALL NONGANTRY_SETTINGS
        ///CALL NONGANTRY_PARAMTERS
        ///Gantry_Mode = 0
        ///CALL X1_IND_HOMING
        ///CALL X2_IND_HOMING
        ///CALL GANTRY_PARAMETERS
        ///Gantry_Mode = 1
        ///
        ///set FPOS(2) = 0
        ///!set FPOS(2) = FPOS(2) - 1.2336
        ///CALL GANTRY_SETTINGS
        ///
        ///enable Axis_X1
        ///ptp/ve Axis_X1,0,100
        ///
        ///CALL INPUTSHAPING_ON
        ///
        ///MFLAG [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gantry_X_Homing {
            get {
                return ResourceManager.GetString("Gantry_X_Homing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !Gantry Y homing
        ///
        ///int Axis_Y
        ///
        ///global real CnvTY(5), CnvAY(5) !CnvB(612)!CnvB(420)
        ///
        ///Axis_Y = 1
        ///
        ///MFLAGS(Axis_Y).#HOME = 0
        ///
        ///disable Axis_Y
        ///
        ///CALL RESTORE_TUNING_PARA
        ///CALL INPUTSHAPING_OFF
        ///enable Axis_Y
        ///
        ///FMASK(Axis_Y).#RL = 1
        ///FMASK(Axis_Y).#LL = 1
        ///
        ///FDEF(Axis_Y).#RL = 0
        ///FDEF(Axis_Y).#LL = 0
        ///
        ///SLSBORD(Axis_Y) =0
        ///
        ///ACC (Axis_Y) = 1000
        ///DEC (Axis_Y) = 1000
        ///KDEC(Axis_Y) = 1000
        ///JERK (Axis_Y) = 10000
        ///
        ///enable Axis_Y
        ///
        ///XCURV(Axis_Y) = 10
        ///XCURI(Axis_Y) = 5
        ///
        ///jog/v Axis_Y, -50
        ///till FAULT(Axis_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gantry_Y_Homing {
            get {
                return ResourceManager.GetString("Gantry_Y_Homing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !Gantry Z Homing
        ///
        ///!Gantry Y homing
        ///
        ///int Axis_Z
        ///
        ///Axis_Z = 4
        ///
        ///FMASK(Axis_Z).#RL = 1
        ///FMASK(Axis_Z).#LL = 1
        ///
        ///FDEF(Axis_Z).#RL = 0
        ///FDEF(Axis_Z).#LL = 0
        ///
        ///MFLAGS(Axis_Z).#HOME = 0
        ///
        ///ACC (Axis_Z) = 2000
        ///DEC (Axis_Z) = 2000
        ///KDEC(Axis_Z) = 3000
        ///JERK (Axis_Z) = 10000
        ///
        ///enable Axis_Z
        ///
        ///XCURV(Axis_Z) = 20
        ///XCURI(Axis_Z) = 10
        ///
        ///jog/v Axis_Z, -1
        ///till FAULT(Axis_Z).#LL = 1
        ///
        ///disable Axis_Z
        ///
        ///wait 1000
        ///
        ///enable Axis_Z
        ///
        ///IST(Axis_Z).#IND=0
        ///jog/v Axis_Z,5
        ///wait 100
        ///TILL IST(Axis_Z).#IND
        ///kill Axis_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gantry_Z_Homing {
            get {
                return ResourceManager.GetString("Gantry_Z_Homing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #/ Controller version = 2.00.28.00
        ///#/ Date = 1/18/2012 9:53 AM
        ///#/ User remarks =
        ///#1
        ///! (M-NT) Homing Program.prg
        ///! The program executes the following sequence:
        ///! - Move to the left limit switch
        ///! - Wait for the left limit release
        ///! - Move to the encoder index
        ///! - Set the iAxis origin to the position of index
        ///! - Move to the origin
        ///
        ///INT iAxis               ! Define a global variable named &quot;iAxis&quot;
        ///iAxis = 0               ! Define the iAxis name (0=X Axis, 1=Y Axis...)
        ///VEL(iAxis)= 2000        ! Se [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HomingForIndexExampl {
            get {
                return ResourceManager.GetString("HomingForIndexExampl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !InternalErrorExitBuffer
        ///
        ///CALL ErrorExit
        ///STOP
        ///
        ///
        ///
        ///ErrorExit:
        ///	CALL TurnOffMotors
        ///	ENABLE LIFTER_AXIS
        ///	WAIT 1000
        ///	CALL LowerLifter
        ///	DISABLE LIFTER_AXIS
        ///	CALL Unclamp
        ///	CALL LowerStopper
        ///	CALL ClearBoardAvailable
        ///	CALL ClearMachineReady
        ///	CURRENT_STATUS = ERROR_STATUS
        ///RET
        ///
        ///TurnOffMotors:
        ///	DISABLEALL
        ///RET
        ///
        ///LowerLifter:
        ///	Lifter_Lowered = 0
        ///	ptp/v LIFTER_AXIS,0,10
        ///	till ^MST(LIFTER_AXIS).#MOVE
        ///	wait 200
        ///	Lifter_Lowered = 1
        ///
        ///
        ///RET
        ///
        ///Unclamp:
        ///	ClampPanel_Bit = 0
        ///RET
        ///
        ///LowerStopper:
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InternalErrorExitBuffer {
            get {
                return ResourceManager.GetString("InternalErrorExitBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !InternalMachineLoadBuffer
        ///
        ///global int LoadPanelStateError
        ///LoadPanelStateError = 0
        ///
        ///global int LoadPanelAlignBeforeSlowSensorError,LoadPanelSecureError,LoadPanelAlignError,LoadPanelSlowSensorError
        ///LoadPanelSlowSensorError = 4
        ///LoadPanelAlignBeforeSlowSensorError = 5
        ///LoadPanelAlignError = 6
        ///LoadPanelSecureError = 7
        ///
        ///int WaitTimeToSlow
        ///int WaitTimeToAlign
        ///int SlowDelayTime
        ///real SlowPosition
        ///real absPosTemp
        ///
        ///TILL EntryOpto_Bit = 0
        ///if EntryOpto_Bit = 0
        ///absPosTemp = RPOS(CONVEYOR_AXIS)
        ///!SlowPo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string InternalMachineLoadBuffer {
            get {
                return ResourceManager.GetString("InternalMachineLoadBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AUTOEXEC:
        ///
        ///
        ///!ECUNMAPOUT(396)
        ///!ECUNMAPOUT(397)
        ///!ECUNMAPOUT(398)
        ///!ECUNMAPOUT(399)
        ///!
        ///!ECUNMAPIN(396)
        ///!ECUNMAPIN(397)
        ///!ECUNMAPIN(398)
        ///!ECUNMAPIN(399)
        ///
        ///!Outputs
        ///
        ///!ECOUT/b(3168,)!0 0.0
        ///!ECOUT/b(3169,)!0 0.1
        ///!ECOUT/b(3170,)!0 0.2
        ///!ECOUT/b(3171,)!0 0.3
        ///ECOUT/b(3172,TowerLightRed_Bit)!0 0.4
        ///ECOUT/b(3173,TowerLightYellow_Bit)!0 0.5
        ///ECOUT/b(3174,TowerLightGreen_Bit)!0 0.6
        ///ECOUT/b(3175,TowerLightBlue_Bit)!0 0.7
        ///
        ///ECOUT/b(3176,TowerLightBuzzer_Bit)!0 1.0
        ///!ECOUT/b(3177,)!0 1.1
        ///ECOUT/b(3178,StopSe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string IO_InitializationBuffer {
            get {
                return ResourceManager.GetString("IO_InitializationBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !Homing LIFTER
        ///
        ///int Axis
        ///int Slave_Number
        ///
        ///Axis= 7
        ///Slave_Number = 4
        ///
        ///MFLAGS(Axis).#HOME = 0
        ///
        ///!******Motion parameters for homing***********
        ///VEL(Axis)=10
        ///ACC(Axis)=1000
        ///DEC(Axis)=1000
        ///KDEC(Axis)=10000
        ///JERK(Axis)=10000
        ///
        ///int EC_Offset, V_Limit_Search, V_Index_Search
        ///
        ///V_Limit_Search = -5
        ///V_Index_Search = 2
        ///EC_Offset = 378
        ///!*********************************************
        ///
        ///disable Axis
        ///till ^MST(Axis).#ENABLED
        ///wait 200
        ///
        ///!*********Unmapping ethercat offset for control word******
        ///ecunmapi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LifterHoming {
            get {
                return ResourceManager.GetString("LifterHoming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !LoadPanelBuffer
        ///
        ///global int LoadPanelStateError
        ///LoadPanelStateError = 0
        ///
        ///global int LoadPanelNotReleasedError,LoadPanelSensorBlockedError,LoadPanelAcqError,LoadPanelSlowSensorError
        ///
        ///LoadPanelNotReleasedError = 1
        ///LoadPanelSensorBlockedError = 2
        ///LoadPanelAcqError = 3
        ///LoadPanelSlowSensorError = 4
        ///
        ///int WaitTimeToAcq
        ///
        ///if CURRENT_STATUS = RELEASED_STATUS
        ///	if (EntryOpto_Bit = 0 &amp; ExitOpto_Bit = 0 &amp; BoardStopPanelAlignSensor_Bit = 0)
        ///		CURRENT_STATUS = LOADING_STATUS
        ///		CALL UpstreamSmemaMachineRea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LoadPanelBuffer {
            get {
                return ResourceManager.GetString("LoadPanelBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !PowerOnRecoverFromEmergencyStopBuffer
        ///
        ///
        ///int WaitTimeToSearch
        ///int WaitTimeToExit
        ///int WaitTimeToReset
        ///
        ///int WidthToW_0_Position
        ///
        ///CALL InitializeACS
        ///TILL Reset_Button_Bit = 1 ,WaitTimeToReset
        ///START 7, 1
        ///TILL ^ PST(7).#RUN
        ///WAIT 5000
        ///CALL InitializeMotors
        ///
        ///CALL EnableOptos
        ///!CALL ErrorExit
        ///
        ///if EstopAndDoorOpenFeedback_Bit = 0																				!IF SAFETY NOT ENGAGED
        ///	CURRENT_STATUS = ERROR_STATUS																					!SET CURRENT STATUS = ERROR STATUS
        ///	CALL ErrorExit																									! [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PowerOnRecoverFromEmergencyStopBuffer {
            get {
                return ResourceManager.GetString("PowerOnRecoverFromEmergencyStopBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !PreReleasePanelBuffer
        ///
        ///global int PreReleaseStateError
        ///PreReleaseStateError = 0
        ///
        ///int WaitTimeToExit
        ///
        ///
        ///if CURRENT_STATUS = LOADED_STATUS
        ///	CURRENT_STATUS = PRERELEASING_STATUS
        ///	PanelFreed = 0
        ///	START FreePanelBufferIndex,1
        ///	TILL ^ PST(FreePanelBufferIndex).#RUN
        ///
        ///	if PanelFreed = 0
        ///		PreReleaseStateError = 2
        ///		CALL ErrorExit
        ///		CURRENT_STATUS = ERROR_STATUS
        ///	else
        ///	    ReleaseCommandReceived = -1
        ///		CALL StartConveyorBeltsDownstream
        ///		TILL ReleaseCommandReceived &lt;&gt; -1,WaitTimeToExit
        ///		if Rel [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PreReleasePanelBuffer {
            get {
                return ResourceManager.GetString("PreReleasePanelBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !ReleasePanelBuffer
        ///
        ///global int ReleasePanelError
        ///ReleasePanelError = 0
        ///
        ///global int ReleasePanelStateError,ReleasePanelFreeError,ReleasePanelExitError,ReleasePanelReleaseError,ReleasePanelSmemaError
        ///
        ///ReleasePanelStateError = 1
        ///ReleasePanelFreeError = 2
        ///ReleasePanelExitError = 3
        ///ReleasePanelReleaseError = 4
        ///ReleasePanelSmemaError = 5
        ///
        ///int WaitTimeToExit
        ///int WaitTimeToRelease
        ///int WaitTimeToSmema
        ///int WaitTimeToCutout
        ///int WaitTimeToBeltVacuum
        ///
        ///if CURRENT_STATUS = PRERELEASED_STATUS
        ///	CURRENT_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ReleasePanelBuffer {
            get {
                return ResourceManager.GetString("ReleasePanelBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !ReloadPanelBuffer
        ///
        ///global int ReloadPanelError
        ///ReloadPanelError = 0
        ///
        ///global int ReloadPanelStateError,ReloadPanelFreeError,ReloadPanelSearchError,ReloadPanelSlowSensorError
        ///
        ///ReloadPanelStateError = 1
        ///ReloadPanelFreeError = 2
        ///ReloadPanelSearchError = 3
        ///ReloadPanelSlowSensorError = 4
        ///
        ///int WaitTimeToSearch
        ///int ReloadDelayTime
        ///
        ///if CURRENT_STATUS = LOADED_STATUS								!IF CURRENT STATE = LOADED STATE
        ///	CURRENT_STATUS = RELOADING_STATUS								!SET STATE = RELOADING STATUS
        ///	START FreePanelBuffer [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ReloadPanelBuffer {
            get {
                return ResourceManager.GetString("ReloadPanelBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///real SCAN_POINTS(_NR_SCAN_POINTS_)(3)
        ///real SCAN_POINTS_VELOCITY(_NR_SCAN_POINTS_)(3)
        ///real SCAN_POINTS_DELAY(_NR_SCAN_POINTS_)(3)
        ///
        ///!wait 10000
        ///
        ///int START_SCAN_POINT_INDEX
        ///int END_SCAN_POINT_INDEX
        ///
        ///int IS_NEED_WAIT_CONTINUE_COMMAND
        ///
        ///int START_NEXT_STEP_COMMAND
        ///int WAIT_CONTINUE_COMMAND_MONITOR
        ///
        ///int CURRENT_STEP_INDEX
        ///int IS_ERROR
        ///
        ///int MOVE_MOTION_COMPLETE_RECVD
        ///int MOVE_PSX_ACK_RECVD
        ///
        ///MOVE_MOTION_COMPLETE_RECVD = 0
        ///MOVE_PSX_ACK_RECVD = 0
        ///
        ///DO_SCAN:
        ///!ENABLE ALL
        ///
        ///ENABLE (X_AXIS,Y_AXIS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScanningBuffer {
            get {
                return ResourceManager.GetString("ScanningBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !SecurePanelBuffer
        ///
        ///int ClampLiftDelayTime
        ///int WaitTimeToPanelClamped
        ///int WaitTimeToLifted
        ///int WaitTimeToUnstop
        ///real Stage_1_LifterOnlyDistance
        ///real Stage_2_LifterAndClamperDistance
        ///
        ///global int SecurePanelStateError
        ///SecurePanelStateError = 0
        ///
        ///global int SecurePanelToClampedError,SecurePanelToLiftedError,SecurePanelToUnstopError
        ///
        ///SecurePanelToClampedError=1
        ///SecurePanelToLiftedError=2
        ///SecurePanelToUnstopError=3
        ///
        ///int StageLifterResult
        ///real absPosTemp
        ///
        ///PanelSecured = 0
        ///
        ///CALL TurnOffPanelS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SecurePanelBuffer {
            get {
                return ResourceManager.GetString("SecurePanelBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to !Homing WIDTH
        ///
        ///int Axis
        ///int Slave_Number
        ///
        ///Axis= 6
        ///Slave_Number = 3
        ///
        ///ConveyorWidthHomed = 0
        ///MFLAGS(Axis).#HOME = 0
        ///
        ///!******Motion parameters for homing***********
        ///VEL(Axis)=10
        ///ACC(Axis)=1000
        ///DEC(Axis)=1000
        ///KDEC(Axis)=10000
        ///JERK(Axis)=10000
        ///
        ///int EC_Offset, V_Limit_Search, V_Index_Search
        ///
        ///V_Limit_Search = -5
        ///V_Index_Search = 2
        ///EC_Offset = 364
        ///!*********************************************
        ///
        ///disable Axis
        ///till ^MST(Axis).#ENABLED
        ///wait 200
        ///
        ///!*********Unmapping ethercat offset for contr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WidthHoming {
            get {
                return ResourceManager.GetString("WidthHoming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WidthLifterConveyor_Reset_Completed = 0
        ///
        ///
        ///
        ///
        ///
        ///!Reset Width
        ///
        ///int Axis
        ///int Slave_Number
        ///
        ///Axis= 6
        ///Slave_Number = 3
        ///
        ///int EC_Offset
        ///
        ///EC_Offset = 364
        ///
        ///disable Axis
        ///till ^MST(Axis).#ENABLED
        ///wait 200
        ///
        ///!*********Unmapping ethercat offset******
        ///ecunmapin(EC_Offset)
        ///ecunmapout(EC_Offset)
        ///!***************************************
        ///
        ///!***********Fault Clear***********
        ///ecout(EC_Offset,ControlWord_Conveyor)
        ///ControlWord_Conveyor = 0x8F
        ///wait 500
        ///ControlWord_Conveyor = 0x0F
        ///coewrite/1(Slave_Number [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WidthLifterConveyorReset {
            get {
                return ResourceManager.GetString("WidthLifterConveyorReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ! SpiiPlus Commutation Startup Program
        ///! Date: 15/1/09
        ///! Program version: 6.5
        ///! Author: Boaz Kramer
        ///! Retrieve Commutation Phase at a Detent Point.
        ///!
        ///! The following text provides a suggested commutation startup program.
        ///! It is recommended to use it as a part of the homing process.
        ///! The user needs to customize the program, add safety checks and  test
        ///!   before the program can be included in the application.
        ///!
        ///! Program clears bits 1,4,5,6 of MFLAGS and sets bit 8 of MFLAGS.
        ///!
        ///! Program moves [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string XCommutation {
            get {
                return ResourceManager.GetString("XCommutation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ! SpiiPlus Commutation Startup Program
        ///! Date: 15/1/09
        ///! Program version: 6.5
        ///! Author: Boaz Kramer
        ///! Retrieve Commutation Phase at a Detent Point.
        ///!
        ///! The following text provides a suggested commutation startup program.
        ///! It is recommended to use it as a part of the homing process.
        ///! The user needs to customize the program, add safety checks and  test
        ///!   before the program can be included in the application.
        ///!
        ///! Program clears bits 1,4,5,6 of MFLAGS and sets bit 8 of MFLAGS.
        ///!
        ///! Program moves [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string YCommutation {
            get {
                return ResourceManager.GetString("YCommutation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///
        ///
        ///GLOBAL INT isDone5
        ///
        ///isDone5 = 0
        ///
        ///GLOBAL INT MASTER_AXIS
        ///GLOBAL INT SLAVE_AXIS
        ///
        ///
        ///MASTER_AXIS = 0
        ///SLAVE_AXIS = 1
        ///SAFETYGROUP(0,1)
        ///
        ///SET FPOS(MASTER_AXIS) = 0
        ///SET FPOS(SLAVE_AXIS) = 1
        ///
        ///MFLAGS(MASTER_AXIS).#DEFCON = 1
        ///
        ///MFLAGS(SLAVE_AXIS).#DEFCON = 1
        ///
        ///
        ///
        ///MFLAGS(SLAVE_AXIS).#DEFCON=0   !CONNECT is allowed.
        ///
        ///CONNECT RPOS(SLAVE_AXIS)= APOS(SLAVE_AXIS) + FPOS(MASTER_AXIS)
        ///
        ///DEPENDS (SLAVE_AXIS),(SLAVE_AXIS,MASTER_AXIS)
        ///
        ///ENABLE (MASTER_AXIS,SLAVE_AXIS)
        ///
        ///VEL(MASTER_AXIS) = 100
        ///VEL(SLAV [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string YMasterSlaveCommutationExampl {
            get {
                return ResourceManager.GetString("YMasterSlaveCommutationExampl", resourceCulture);
            }
        }
    }
}
